from sympy import *
from Crypto.Util.number import *
import gmpy2
import math
print(-bytes_to_long(b'zyt')+bytes_to_long(b'ltt'))
c1 = 77153106333350149098279629783581253227714656776902515837639851310297008296341520748789739405907823190965742392321142798563704995011579576215915420935553294487314289721867798312847768689744803654287961656424428438670192770534776272801790345412123983823010056725849223104578367988324361061739199417023146339792
c2 = 6617950992311675687762501414795400646207381592567101754447321959539012263639850559149805006546049750372305353117122679938503745782131680133105798066991128043779095522514613143574582403794865963124469467543094080888707193448946337752273256302654241511325117016934545077200440220478972272488330644628023604051
e = 0x2011
n = 100629568300195422026209720138083819740688937576398708400585960602682192936492818132466039511921120918016902172483760660489312630334139995305497444989216921549838520240791960625644839391829752509853217051446224001719653051737930338141651736504833754948493930878589007867644561521293569631611978825044223383791

x=n
#print(-bytes_to_long(b'ltt')+bytes_to_long(b'zyt'))
#print(GCD(pow(x+918784,e)-c1,pow(x,e)-c2))
#M=100629568300195422026209720138083819740688937576398708400585960602682192936492818132466039511921120918016902172483760660489312630334139995305497444989216921549838520240791960625644839391829752509853217051446224001719653051737930338141651736504833754948493930878589007867644561521293569631611978825044223383790
M=854589733786559855875624960116497650663289731569284754531210897925459759469373721011801909000564
print(long_to_bytes(M).decode())


#Sage
# c1 = 77153106333350149098279629783581253227714656776902515837639851310297008296341520748789739405907823190965742392321142798563704995011579576215915420935553294487314289721867798312847768689744803654287961656424428438670192770534776272801790345412123983823010056725849223104578367988324361061739199417023146339792
# c2 = 6617950992311675687762501414795400646207381592567101754447321959539012263639850559149805006546049750372305353117122679938503745782131680133105798066991128043779095522514613143574582403794865963124469467543094080888707193448946337752273256302654241511325117016934545077200440220478972272488330644628023604051
# e = 0x2011
# n = 100629568300195422026209720138083819740688937576398708400585960602682192936492818132466039511921120918016902172483760660489312630334139995305497444989216921549838520240791960625644839391829752509853217051446224001719653051737930338141651736504833754948493930878589007867644561521293569631611978825044223383791
#
# def franklinReiter(n,e,b,c1,c2):
#     R.<X> = Zmod(n)[]
#     f1 = X^e - c1
#     f2 = (X + b)^e - c2
#     m_ = GCD(f1,f2).coefficients()[0]
#     return Integer(n - m_)
#
# def GCD(a, b):
#     while 1:
#         if(b == 0):
#             return a.monic()
#         c=b
#         b=a % b
#         a=c
# M = franklinReiter(n,e,-918784,c1,c2)
# print(M)
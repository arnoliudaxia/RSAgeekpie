#6. extended_wiener_RSA: Extending wiener attack using lattice.

# First you need to download Crypto library!
import subprocess

###############################################################################
try:                                                                          #
    from Crypto.Util.number import *                                          #
except ImportError:                                                           #  DO NOT
    subprocess.check_call(['python', "-m", "pip", "install", 'PyCryptodome'], #
                          stdout=subprocess.DEVNULL,                          #  CHANGE
                          stderr=subprocess.DEVNULL)                          #
finally:                                                                      #
    from Crypto.Util.number import *                                          #
###############################################################################
import gmpy2
import sympy
import libnum
import random
from FLAG import flag

"""
May be you need to know something about lattice and extended wiener attack :) 
May be this question is a little bit hard. So this question will not be calculated in the total score.
Just for fun!!
"""

def genE(lcm, bound):
    while True:
        r = random.randint(bound, bound*0x1000000000001)
        d = sympy.nextprime(r)
        e = libnum.invmod(d, lcm)
        if isPrime(e):
            break
    return e

# generate p and q
p = getStrongPrime(1024)
q = getStrongPrime(1024)
N = p * q

# Generate two big e where limit is a number to confirm parameters satisfy Minkowski Bounds.
# Hint: You may do not need to know about what this part is doing, just try to construct the lattice and use LLL algorithm to solve it!
lcm = libnum.lcm(p-1, q-1)
bound = gmpy2.iroot(N, 3)[0]
e1 = genE(lcm, bound)
e2 = genE(lcm, bound)

# encryption
phi = (p-1) * (q-1)
d1 = libnum.invmod(e1, phi)
d2 = libnum.invmod(e2, phi)
m1, m2 = bytes_to_long(flag[0:len(flag)//2]), bytes_to_long(flag[len(flag)//2::])
c1, c2 = pow(m1, e1, N), pow(m2, e2, N)
print('N = ' + str(N))
print('e1 = ' + str(e1))
print('e2 = ' + str(e2))
print('c1 = ' + str(c1))
print('c2 = ' + str(c2))

"""
output:
N  = 19954275573298737412618474560269349440213616485657184210578870177137709026199600007090015210126225444936765764965637797694483149013546254102723215633155711382960109722966197429144183652596050986677126342768633547283621976935150942788384846520276191563061524949468676323141075041558200049229928236311831727373225818765206245607061673345542065706676573086213560881150031488453553733636077071237940630939780185449947568120736901877382214880312928238538195137835192992805198420714475475864172289672671110036493261026720390308757028931047509966967107828595873280681973736427716621444524770544127949548741635399194894249933
e1 = 6626668904188141234071403613067174888579612119387942680274768679831082325357322920755231534232413897295873199072447310504034165788983510114362010845170367950183637494996053575287368334621763685215854399825624746538528674386887128867082234673466477320102216012583051596821841814463694727681305590391951563867648760819705899005750069068305181639988502130778236495644799363698132262230279871557758930338052644753364881049341373229007004212364332131245240675609811058495415487184176012028043006036303252220497235921567898762695211300416218843521094883873782767454864928084356692062036458461488503798674081448100856695477
e2 = 1436543767455282970477214614795055979620666108960440170481388207066611380767743150398533729307590098975788674478332534413414629558385111750046597209960673814357492850016419625310549467125087817788227490824415988563624934085044182888459242322734889860456503171953440220949784962481070654196838675656750373286482115918064546417295240125934308544733028311263070798018271853259534869116995529587906390752817997647385119308700491779565189881605712552474979486933482810383292477004545452081681657705381041148896605815613458083620212036873889225095083467954113160907532173790674276932280083726949951155467025373144919838569
c1 = 13735700045314536767604242699697876134082269313201238479856960368628891855202330596671144972598011743597596615199613700333202013715002459755043756472856597111278887020135761337088829641300825099419155990935906249121102137128899785605801458260464127718499052089373037404767809917849958373105582277273417880372107251716768432264948232964786362751732110814626355942989873518553604176521455990855211433217141290127138258970340157416755192359171719414084386905664935870359923245631743199639184416385635410218543819528636821220256332388055607713403733827771699769253750785018626504970008227087230747275442635335546285072487
c2 = 11494938483031071419601989435001205829888106256760286203702289666201509266633698547451692078071611476705073846643673583115455222817748463686677357463676049097274345274180186617189327912590663704090724468647248384964276923131435909584254066622943738168395793048195395340364815831880170339529250651018131922757078226204425690727402848096178100247022874350052211384152657174666732864011512886743614174037208506724090551601871936401425992725036434575178910677630322746265821901155007802963341325339161505769822874721998139571001215615122008575424693857984065228147647781778461718079580508005098879353013695236161028880796
"""